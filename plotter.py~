import driver
def plot():

    #pull path coordinates from calculate subroutine
    x, y, projectileRange  = calculatePath(initialVelocity, angle, timestep, choice)
    
    #Plot path of projectile
    plt.plot(x,y)
    plt.xlabel('Distance')
    plt.ylabel('Altitude')
    plt.title('Flight of cannonball')
    plt.text( projectileRange*0.7, 0, 'Range: %.2f' % projectileRange)
    plt.legend()
    plt.savefig('mostrecentplot.pdf')
    plt.show()

def plotMethods():

    #pull path coordinates from calculate subroutine
    x1, y1, projectileRange1  = calculatePath(initialVelocity, angle, timestep, 1)
    x2, y2, projectileRange2  = calculatePath(initialVelocity, angle, timestep, 2)
    x3, y3, projectileRange3  = calculatePath(initialVelocity, angle, timestep, 3)
    
    #Plot path of projectile
    plt.plot(x1,y1, label = "Without drag")
    plt.plot(x2,y2, label = "With drag")
    plt.plot(x3,y3, label = "With variable air density")
    plt.xlabel('Distance')
    plt.ylabel('Altitude')
    plt.title('Flight of cannonball')
   # plt.text( projectileRange*0.7, 0, 'Range: %.2f' % projectileRange)
    plt.legend()
    plt.savefig('mostrecentplot.pdf')
    plt.show()

def plotTimeSteps():

    #pull path coordinates from calculate subroutine
    x1, y1, projectileRange1  = calculatePath(initialVelocity, angle, 5, choice)
    x2, y2, projectileRange2  = calculatePath(initialVelocity, angle, 3, choice)
    x3, y3, projectileRange3  = calculatePath(initialVelocity, angle, 0.01, choice)
    
    #Plot path of projectile
    plt.plot(x1,y1, label = "deltaT = 5")
    plt.plot(x2,y2, label = "deltaT = 3")
    plt.plot(x3,y3, label = "deltaT = 0.01")
    plt.xlabel('Distance')
    plt.ylabel('Altitude')
    plt.title('Flight of cannonball')
   # plt.text( projectileRange*0.7, 0, 'Range: %.2f' % projectileRange)
    plt.legend()
    plt.savefig('mostrecentplot.pdf')
    plt.show()
